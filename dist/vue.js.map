{"version":3,"file":"vue.js","sources":["../src/compiler/index.js","../src/utils.js","../src/observer/array.js","../src/observer/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["export function complileToFuntion(template) {\n    console.log(template);\n}\n","export function isFunction(val) {\n    return typeof val === 'function';\n}\n\nexport function isObject(val) {\n    return typeof val === 'object' && val !== null;\n}\n","let oldArrayPrototype = Array.prototype;\n\nexport let arrayMethods = Object.create(oldArrayPrototype);\n// 这个创建的对像，的原型链 __proto__ 指向 Array.prototype\n// arrayMerhods.__proto__ = Array.prototype 继承\n\nlet methods = ['push', 'pop', 'shift', 'unshift', 'reverse', 'sort', 'splice'];\n\nmethods.forEach((method) => {\n    // 用户调用上面 7 个方法，会使用这里重写的，否则使用原理数组 原生的方法。\n    arrayMethods[method] = function (...args) {\n        console.log('数组变化了');\n\n        // 调用数组原生的方法\n        oldArrayPrototype[method].call(this, ...args);\n\n        // arr.push({a:1})\n\n        // 新数据进行添加get set 方法\n\n        let inserted;\n        let ob = this.__ob__;\n        switch (method) {\n            case 'push':\n            case 'unshift':\n                inserted = args; // 新增的数据\n                break;\n            case 'splice':\n                inserted = args.slice(2);\n            default:\n                break;\n        }\n\n        // 如果有新增的内容需要进行集训劫持，需要观测数组里面的每一项。\n        if (inserted) {\n            ob.observeArray(inserted);\n        }\n    };\n});\n","import { isObject } from '../utils';\nimport { arrayMethods } from './array';\n\n// 总结  vue源码中 响应式原理， 编译原理（模版）  diff算法。\n// 1. 如果数据是对象， 会将对象不停的递归 进行 劫持，（添加 get set 方法）\n// 2. 如果数据是数组，会劫持数组的方法，修改数组中的原型链 __proto__ 指向我们的对象， 并对数组中不是基本数据类型的进行监测。\n\n// 监测数据变化 ，类有类型，知道是它的实例\nclass Observer {\n    // 对对象中的所有属性进行劫持，绑定 get /set 方法， 循环对象属性\n    constructor(data) {\n        Object.defineProperty(data, '__ob__', {\n            value: this,\n            enumerable: false\n        });\n        // data.__ob__ = this; // 被劫持过的属性都有 __ob__ ,下面遍历时要不能遍历的这个属性\n\n        if (Array.isArray(data)) {\n            // 数组劫持的逻辑\n            // 对数组原来对方法进行改写，切面编程，高阶函数\n            // 只修改这个数组中的方法， 外部的数组不受影响\n            data.__proto__ = arrayMethods;\n\n            // 如果数组中的数据上对象类型，需要监控对象的变化\n            this.observeArray(data);\n        } else {\n            this.walk(data);\n        }\n    }\n\n    // 进行对数组中的数组，对象进行劫持，采用递归\n    observeArray(data) {\n        data.forEach((item) => {\n            observe(item);\n        });\n    }\n\n    // 循环对象属性，将这个对象的属性 设置成响应式的\n    walk(data) {\n        // 这个方式不会 获取data 原型中的属性。\n        Object.keys(data).forEach((key) => {\n            defineReactive(data, key, data[key]);\n        });\n    }\n}\n\n// vue2 会对对象进行遍历，将每个属性 用 define Property 重新定义，性能差，不断递归\nfunction defineReactive(data, key, value) {\n    observe(value); // 进行递归下面的属性,对象套对象\n    Object.defineProperty(data, key, {\n        get() {\n            return value;\n        },\n        set(newV) {\n            // 把用户设置的值也进行劫持，赋值一个新对象\n            observe(newV);\n            value = newV;\n        }\n    });\n}\n\n// 观测数据\nexport function observe(data) {\n    // 如果是对象才观测\n\n    if (!isObject(data)) {\n        return;\n    }\n    if (data.__ob__) {\n        return;\n    }\n\n    // 默认最外层的data 必须是一个对象\n    // 给这些数据，创建一个观察者\n    return new Observer(data);\n}\n","import { observe } from './observer/index'; // node_resolve_plugin 这个插件就能自动找目录下的index 文件\nimport { isFunction } from './utils';\n\n// 状态的初始化\nexport function initState(vm) {\n    const opts = vm.$options;\n\n    if (opts.data) {\n        initData(vm);\n    }\n\n    // computed 与 watch 的区别\n    // if (opts.computed) {\n    //     initComputed();\n    // }\n    // if (opts.watch) {\n    //     initWatch();\n    // }\n}\n\nfunction proxy(vm, source, key) {\n    Object.defineProperty(vm, key, {\n        get() {\n            return vm[source][key];\n        },\n        set(newValue) {\n            vm[source][key] = newValue;\n        }\n    });\n}\n\n// 用户传入的数据，要将它们变成响应式的。怎么做呢？\nfunction initData(vm) {\n    let data = vm.$options.data;\n\n    // vue2中会将 data 中的所有数据，进行数据劫持 Object.defineProperty()\n    // data 可能是对象，函数，需要判断。 当是函数时，函数里面的this 都是vue 实例\n    // vm 和 data 没有任何关系，通过 _data 进行关联\n    data = vm._data = isFunction(data) ? data.call(vm) : data;\n    // console.log(data, '----');\n\n    // 将 data 中数据代理到 vm上， 可以直接到 vm 获取数据\n    // 用户 vm.name 等价于 vm._data.name\n    for (let key in data) {\n        proxy(vm, '_data', key);\n    }\n\n    //  这里就获取到数据了，就要进行数据的响应式功能\n    observe(data);\n}\n","import { complileToFuntion } from './compiler/index';\nimport { initState } from './state';\n\n//  在 vue 上进行一次混合操作，扩展添加方法\nexport function initMixin(Vue) {\n    Vue.prototype._init = function (options) {\n        // console.log(options);\n        // el , data\n        const vm = this;\n        vm.$options = options; // 选项，用户使用时会调用 $options ,所以框架底层进行这样创建，后面会扩展他\n\n        // 对数据进行初始化，watch  computed props  data ，都是数据\n        //  数据劫持：就是当操作数据时，让我们知道了修改了，获取了这个数据，然后我们就可以进行做 更新试图 等功能。\n        // 加get set 方法，第一步是加了数据监控等功能，\n        initState(vm); // vm.$options.data 将数据处理放在另外一个方法中，状态初始化\n\n        // 将数据挂在 模版上\n        if (vm.$options.el) {\n            // 将数据挂载到这个模板上\n            vm.$mount(vm.$options.el);\n        }\n        // 有可能传入 template：“” ， render:h() //优先级高\n    };\n\n    Vue.prototype.$mount = function (el) {\n        const vm = this;\n        const options = vm.$options;\n        el = document.querySelector(el);\n        // 把模版转化成 对应的渲染函数  =》 虚拟 DOM 概念， vnode  =》 diff 算法 更新虚拟dom =》 产生真实的节点，更新\n        if (!options.render) {\n            let template = options.template;\n            if (!template && el) {\n                template = el.outerHTML;\n                let render = complileToFuntion(template);\n                options.render = render; // 就是渲染函数\n            }\n        }\n    };\n}\n","import { initMixin } from './init';\n\n// Vue 是一个构造函数\nfunction Vue(options) {\n    this._init(options);\n}\n\n// 这样添加会写很多这样的代码，实现功能拆分到其他文件中，使用下面mixin 方式，扩展原型方法\n// Vue.prototype._init = function(){}\n\n// 给构造函数，添加实例公共方法\n// 扩展原型\ninitMixin(Vue);\n\nexport default Vue;\n"],"names":["complileToFuntion","template","console","log","isFunction","val","isObject","oldArrayPrototype","Array","prototype","arrayMethods","Object","create","methods","forEach","method","args","call","inserted","ob","__ob__","slice","observeArray","Observer","data","defineProperty","value","enumerable","isArray","__proto__","walk","item","observe","keys","key","defineReactive","get","set","newV","initState","vm","opts","$options","initData","proxy","source","newValue","_data","initMixin","Vue","_init","options","el","$mount","document","querySelector","render","outerHTML"],"mappings":"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"}